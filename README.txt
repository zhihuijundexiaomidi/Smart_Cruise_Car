11:30 2022/4/14
小车的驱动问题解决。hal使用pwm时，必须调用pwmstart的开始运行函数。
占空比10的时候转弯会驱动力不足，需要补正，直角转弯的时候，也许会碰上红外检测器
同时为0的状态。

19:39 2022/4/17
解决了2.4g通信部分代码，spi通信方式。
舵机部分代码完成。
但是转弯角度过于恶劣，会影响寻迹。

23:31 2022/4/19
解决方案，取消直角等会干扰转弯的赛道。改为环形跑道。
但是依旧会出现转弯，丢失检测。将任务优先级调到最高，解决了转弯检测丢失问题。

12:05 2022/4/20
编码器配置成功，后续把编码器的bsp写出来。

15:42 2022/4/21
PID部分代码移植成功，现在可以控制死车轮的速度了。

6:55 2022/4/25
在调试2.4G通信的时候，之前测试通过的代码程序突然，无法完成初始化验证。于是我们对代码进行分析，发现程序一直无法完成模块的初始化程序。
于是首先需要排除硬件故障，因为连线是重新焊接过的。所以我们使用万能表依次对每个引脚的电路进行通断检测，发现每条电路都是导通的。
说明硬件连接没有问题。再检测一次连线引脚是否连接正确，发现没有问题。硬件故障排除。说明问题出在代码上。
于是我们再次将测试手柄程序上NRF24L01的初始化部分代码，看是否出现相同的问题。发现手柄的程序初始化代码是可以通过的。
然后我们将小车上的NRF24L01替换在了手柄上。发现同样能够正常初始化。说明，NRF24L01的硬件本身不存在问题。
于是我们用git版本管理对小车部分代码进行了版本回退后，对比代码发现，引脚只有IRQ不一样。而这个引脚并不影响初始化。
于是我们将回退版本的代码烧入小车程序里，发现初始化依旧失败。但是之前验证是通过的。程序没有问题。
于是我们将NRF24L01从小车上取下，用另一块stm32C8T6最小系统去测试。发现初始化成功了。程序正常运行。然后再次测试最新的的程序，程序依旧能够成功运行。
说明小车的C8T6模块可能发生了损坏。于是我们将小车上的C8T6模块取下，烧入程序，进行验证。测试结果是stm32C8T6最小系统板发生损坏。
（但是之前硬件大概率是没有问题的。原因有可能是电机驱动发生电流导致了器件损坏。）

13:46 2022/4/25
完善了2.4G的通信部分。接收测试是通过的。准备上传到git
前一个版本号为82caee1990b6142f7873c5709e2ec86d87b15e57















